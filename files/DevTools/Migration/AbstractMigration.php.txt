<?php
namespace KTRLib\DevTools\Migration;

use Phinx\Db\Table;
use Phinx\Migration\AbstractMigration as PhAbstMig;

/**
 * kotoriコマンド
 * マイグレーションファイル抽象クラス
 *
 * @author muramoya
 * @version: 1.1.0
 */
abstract class AbstractMigration extends PhAbstMig
{
    private $args = [];

    /**
     * @var Table
     */
    public $table;

    /**
     * マイグレーション対象のテーブルを指定します。
     * 必ず最初にこのメソッドをコールしてください。
     *
     * @param string $name
     */
    public function tableName($name)
    {
        $table = $this->table($name, ['id' => false, 'primary_key' => ['id']])
            ->addColumn('id', 'integer', ['identity' => true]);
        $this->table = $table;
    }

    /**
     * varchar
     * @param string $name
     * @return $this
     */
    public function string($name)
    {
        $this->columnName($name);
        $this->columnType('string');
        return $this;
    }

    /**
     * int
     * @param string $name
     * @return $this
     */
    public function integer($name)
    {
        $this->columnName($name);
        $this->columnType('integer');
        return $this;
    }

    /**
     * bigint
     * @param string $name
     * @return $this
     */
    public function bigint($name)
    {
        $this->columnName($name);
        $this->columnType('biginteger');
        return $this;
    }

    /**
     * binary
     * @param string $name
     * @return $this
     */
    public function binary($name)
    {
        $this->columnName($name);
        $this->columnType('binary');
        return $this;
    }

    /**
     * boolean
     * @param string $name
     * @return $this
     */
    public function boolean($name)
    {
        $this->columnName($name);
        $this->columnType('boolean');
        return $this;
    }

    /**
     * date
     * @param string $name
     * @return $this
     */
    public function date($name)
    {
        $this->columnName($name);
        $this->columnType('date');
        return $this;
    }

    /**
     * datetime
     * @param string $name
     * @return $this
     */
    public function datetime($name)
    {
        $this->columnName($name);
        $this->columnType('datetime');
        return $this;
    }

    /**
     * decimal
     * @param string $name
     * @return $this
     */
    public function decimal($name)
    {
        $this->columnName($name);
        $this->columnType('decimal');
        return $this;
    }

    /**
     * float
     * @param string $name
     * @return $this
     */
    public function float($name)
    {
        $this->columnName($name);
        $this->columnType('float');
        return $this;
    }

    /**
     * text
     * @param string $name
     * @return $this
     */
    public function text($name)
    {
        $this->columnName($name);
        $this->columnType('text');
        return $this;
    }

    /**
     * time
     * @param string $name
     * @return $this
     */
    public function time($name)
    {
        $this->columnName($name);
        $this->columnType('time');
        return $this;
    }

    /**
     * timestamp
     * @param string $name
     * @return $this
     */
    public function timestamp($name)
    {
        $this->columnName($name);
        $this->columnType('timestamp');
        return $this;
    }

    /**
     * uuid
     * @param string $name
     * @return $this
     */
    public function uuid($name)
    {
        $this->columnName($name);
        $this->columnType('uuid');
        return $this;
    }

    /**
     * blob
     * @param string $name
     * @return $this
     */
    public function blob($name)
    {
        $this->columnName($name);
        $this->columnType('blob');
        return $this;
    }

    /**
     * json
     * @param string $name
     * @return $this
     */
    public function json($name)
    {
        $this->columnName($name);
        $this->columnType('json');
        return $this;
    }

    /**
     * DEFAULT値
     * @param string $val
     * @return $this
     */
    public function default($val)
    {
        $this->columnOption(__FUNCTION__, $val);
        return $this;
    }

    /**
     * auto increment
     * @return $this
     */
    public function increments()
    {
        $this->columnOption('identity', true);
        return $this;
    }

    /**
     * unsigned
     * @return $this
     */
    public function unsigned()
    {
        $this->columnOption('signed', true);
        return $this;
    }

    /**
     * データサイズを指定します
     * @param int $val
     * @return $this
     */
    public function size($val)
    {
        $this->columnOption('limit', $val);
        return $this;
    }

    /**
     * NULL値を許可します
     * @return $this
     */
    public function nullable()
    {
        $this->columnOption('null', true);
        return $this;
    }

    /**
     * AFTERステートメントを追加します
     * @param string $column
     * @return $this
     */
    public function after($column)
    {
        $this->columnOption('after', $column);
        return $this;
    }

    /**
     * コメントを追加します
     * @param string $val
     * @return $this
     */
    public function comment($val)
    {
        $this->columnOption('comment', $val);
        return $this;
    }

    /**
     * モデルトレイトのタイムスタンプカラムを追加します
     * created_at datetime not null
     * updated_at datetime not null
     */
    public function timestampable()
    {
        $this->datetime('created_at')
             ->add();
        $this->datetime('updated_at')
            ->add();
    }

    /**
     * モデルトレイトの論理削除カラムを追加します
     * deleted_at datetime default null
     */
    public function softdelete()
    {
        $this->datetime('deleted_at')
            ->nullable()
            ->add();
    }

    /**
     * カラムに対してユニークインデックスを設定します。
     * @return $this
     */
    public function unique()
    {
        $name = $this->args['name'];
        $this->table->addIndex([$name], ['unique' => true, 'name' => 'idx_' . $this->table->getName() . '_' . $name]);
        return $this;
    }

    /**
     * ユニークインデックスを追加します。
     * 複数カラムの組み合わせでインデックスを追加したい時に使用します。
     * カラム単体に対して指定も可能です。
     *
     * @param array $columns
     */
    public function addUniqueIndex(array $columns)
    {
        $name = implode('_', $columns);
        $this->table->addIndex($columns, ['unique' => true, 'name' => 'idx_' . $this->table->getName() . '_' . $name]);
    }

    /**
     * カラムに対してインデックスを設定します。
     * @return $this
     */
    public function index()
    {
        $name = $this->args['name'];
        $this->table->addIndex([$name], ['unique' => false, 'name' => 'idx_' . $this->table->getName() . '_' . $name]);
        return $this;
    }

    /**
     * インデックスを追加します。
     * 複数カラムの組み合わせでインデックスを追加したい時に使用します。
     * カラム単体に対して指定も可能です。
     *
     * @param array $columns
     */
    public function addIndex(array $columns)
    {
        $name = implode('_', $columns);
        $this->table->addIndex($columns, ['unique' => false, 'name' => 'idx_' . $this->table->getName() . '_' . $name]);
    }

    /**
     * 外部キーを設定します。
     *
     * @param string $column
     * @param string $referenceTable
     * @param string $referenceColumn
     * @param array $option
     */
    public function addForeignKey($column, $referenceTable, $referenceColumn, $option = array())
    {
        $this->table->addForeignKey($column, $referenceTable, $referenceColumn, $option);

    }

    /**
     * カラム設定を適用します。
     * チェーンメソッドでカラム設定をした後にこのメソッドをコールすることでその設定が
     * マイグレーションされます。
     */
    public function add()
    {
        $params = $this->args;
        if(!isset($params['option']['null'])) $params['option']['null'] = false;
        $this->table->addColumn($params['name'], $params['type'], $params['option']);
        $this->args = [];
    }

    /**
     * テーブル作成を実行します。
     */
    public function create()
    {
        $this->table->create();
    }

    public function columnName($name)
    {
        $this->args['name'] = $name;
    }

    public function columnType($type)
    {
        $this->args['type'] = $type;
    }

    public function columnOption($key, $val)
    {
        $this->args['option'][$key] = $val;
    }
}
